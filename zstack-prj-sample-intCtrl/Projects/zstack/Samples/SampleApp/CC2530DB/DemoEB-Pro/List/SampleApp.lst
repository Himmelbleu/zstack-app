###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                12/Jul/2023  17:49:34 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\Source\SampleApp. #
#                          c                                                  #
#    Command line       =  -f E:\DevProjs\zstack-app\zstack-prj-sample-intCtr #
#                          l\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0          #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00010000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x2222                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\Source\SampleApp. #
#                          c -D ZIGBEEPRO -D BUILD_ALL_DEVICES -D             #
#                          HOLD_AUTO_START -D LCD_SUPPORTED -D                #
#                          HAL_UART=FALSE -lC E:\DevProjs\zstack-app\zstack-p #
#                          rj-sample-intCtrl\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\DemoEB-Pro\List\ -lA                    #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\DemoEB-P #
#                          ro\List\ --diag_suppress Pe001,Pa010 -o            #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\DemoEB-P #
#                          ro\Obj\ -e --require_prototypes --debug            #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I E:\DevProjs\zstack-app\zsta #
#                          ck-prj-sample-intCtrl\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\ -I E:\DevProjs\zstack-app\zstack-p #
#                          rj-sample-intCtrl\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\SOURCE\ -I                           #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \ZMAIN\TI2530DB\ -I E:\DevProjs\zstack-app\zstack- #
#                          prj-sample-intCtrl\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I       #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\HAL\INCLUDE\ -I                  #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I          #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I               #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\OSAL\INCLUDE\ -I                 #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\AF\ -I                     #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\NWK\ -I                    #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\SEC\ -I                    #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\SAPI\ -I                   #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\SYS\ -I                    #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\ZDO\ -I                    #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\ZMAC\F8W\ -I                     #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\ZMAC\ -I                         #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\SERVICES\SADDR\ -I               #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\SERVICES\SDATA\ -I               #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\INCLUDE\ -I                  #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I               #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I          #
#                          E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ #
#                           -I "E:\DevTools\IAR Systems\Embedded Workbench    #
#                          5.3 Evaluation version\8051\INC\" -I               #
#                          "E:\DevTools\IAR Systems\Embedded Workbench 5.3    #
#                          Evaluation version\8051\INC\CLIB\" -Ohz            #
#    List file          =  E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\DemoEB-P #
#                          ro\List\SampleApp.lst                              #
#    Object file        =  E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\DemoEB-P #
#                          ro\Obj\SampleApp.r51                               #
#                                                                             #
#                                                                             #
###############################################################################

E:\DevProjs\zstack-app\zstack-prj-sample-intCtrl\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED �AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include <stdio.h>
     60          #include <string.h>
     61          #include "OSAL.h"
     62          #include "ZGlobals.h"
     63          #include "AF.h"
     64          #include "aps_groups.h"
     65          #include "ZDApp.h"
     66          #include "MT_UART.h"   //add by 1305106

   \                                 In  segment SFR_AN, at 0x8a
   \   unsigned char volatile __sfr P1IFG
   \                     P1IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8d
   \   unsigned char volatile __sfr P1IEN
   \                     P1IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf6
   \   unsigned char volatile __sfr P1INP
   \                     P1INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     67          
     68          #include "SampleApp.h"
     69          #include "SampleAppHw.h"
     70          
     71          #include "OnBoard.h"
     72          
     73          /* HAL */
     74          #include "hal_lcd.h"
     75          #include "hal_led.h"
     76          #include "hal_key.h"
     77          #include "sht11.h"
     78          
     79          /*********************************************************************
     80           * MACROS
     81           */
     82          
     83          /*********************************************************************
     84           * CONSTANTS
     85           */
     86          
     87          /*********************************************************************
     88           * TYPEDEFS
     89           */
     90          
     91          /*********************************************************************
     92           * GLOBAL VARIABLES
     93           */
     94          
     95          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     96          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   01000200     DW 1, 2
     97                  {
     98                          SAMPLEAPP_PERIODIC_CLUSTERID,
     99                          SAMPLEAPP_FLASH_CLUSTERID,
    100                  };
    101          

   \                                 In  segment XDATA_ROM_C, align 1
    102          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F0100     DW 3848, 1
   \   000005   0002         DB 0, 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    103                  {
    104                          SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    105                          SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    106                          SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    107                          SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    108                          SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    109                          SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    110                          (cId_t *) SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    111                          SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    112                          (cId_t *) SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    113                  };
    114          
    115          // This is the Endpoint/Interface description.  It is defined here, but
    116          // filled-in in SampleApp_Init().  Another way to go would be to fill
    117          // in the structure here and make it a "const" (in code space).  The
    118          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    120          
    121          /*********************************************************************
    122           * EXTERNAL VARIABLES
    123           */
    124          
    125          /*********************************************************************
    126           * EXTERNAL FUNCTIONS
    127           */
    128          
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133          // This variable will be received when
    134          // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    136          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 gIntFlag;
   \                     gIntFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    147          
    148          /*********************************************************************
    149           * LOCAL FUNCTIONS
    150           */
    151          void SampleApp_HandleKeys(uint8 shift, uint8 keys);
    152          
    153          void SampleApp_MessageMSGCB(afIncomingMSGPacket_t *pckt);
    154          
    155          void SampleApp_SendPeriodicMessage(void);
    156          
    157          void SampleApp_SendFlashMessage(uint16 flashTime);
    158          
    159          void SampleApp_Process_SensorInt(void);
    160          
    161          void SampleApp_ProcessIntMessage(afIncomingMSGPacket_t *pkt);
    162          
    163          void Delay(uint16 n);
    164          
    165          void SensorIO_Init(void);
    166          
    167          /*********************************************************************
    168           * NETWORK LAYER CALLBACKS
    169           */
    170          
    171          /*********************************************************************
    172           * PUBLIC FUNCTIONS
    173           */
    174          
    175          /*********************************************************************
    176           * @fn      SampleApp_Init
    177           *
    178           * @brief   Initialization function for the Generic App Task.
    179           *          This is called during initialization and should contain
    180           *          any application specific initialization (ie. hardware
    181           *          initialization/setup, table initialization, power up
    182           *          notificaiton ... ).
    183           *
    184           * @param   task_id - the ID assigned by OSAL.  This ID should be
    185           *                    used to send messages and set timers.
    186           *
    187           * @return  none
    188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    189          void SampleApp_Init(uint8 task_id) {
   \                     SampleApp_Init:
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    190              SampleApp_TaskID = task_id;
   \   000005   E9           MOV     A,R1
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    191              SampleApp_NwkState = DEV_INIT;
   \   00000A   7401         MOV     A,#0x1
   \   00000C   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000F   F0           MOVX    @DPTR,A
    192              SampleApp_TransID = 0;
   \   000010   E4           CLR     A
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   F0           MOVX    @DPTR,A
    193          
    194              // Device hardware initialization can be added here or in main() (Zmain.c).
    195              // If the hardware is application specific - add it here.
    196              // If the hardware is other parts of the device add it in main().
    197          
    198          #if defined ( BUILD_ALL_DEVICES )
    199              // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    200              // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    201              // together - if they are - we will start up a coordinator. Otherwise,
    202              // the device will start as a router.
    203              if ( readCoordinatorJumper() )
   \   000015                ; Setup parameters for call to function readCoordinatorJumper
   \   000015   12....       LCALL   ??readCoordinatorJumper?relay
   \   000018   E9           MOV     A,R1
   \   000019   6003         JZ      ??SampleApp_Init_0
    204                zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
   \   00001B   E4           CLR     A
   \   00001C   8002         SJMP    ??SampleApp_Init_1
    205              else
    206                zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
   \                     ??SampleApp_Init_0:
   \   00001E   7401         MOV     A,#0x1
   \                     ??SampleApp_Init_1:
   \   000020   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000023   F0           MOVX    @DPTR,A
    207          #endif // BUILD_ALL_DEVICES
    208          
    209          #if defined ( HOLD_AUTO_START )
    210              // HOLD_AUTO_START is a compile option that will surpress ZDApp
    211              //  from starting the device and wait for the application to
    212              //  start the device.
    213              ZDOInitDevice(0);
   \   000024                ; Setup parameters for call to function ZDOInitDevice
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7B00         MOV     R3,#0x0
   \   000028   12....       LCALL   ??ZDOInitDevice?relay
    214          #endif
    215          
    216              // Setup for the periodic message's destination address
    217              // Broadcast to everyone
    218              SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t) AddrBroadcast;
   \   00002B   740F         MOV     A,#0xf
   \   00002D   12....       LCALL   ?Subroutine1 & 0xFFFF
    219              SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    220              SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \                     ??CrossCallReturnLabel_2:
   \   000030   74FF         MOV     A,#-0x1
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   F0           MOVX    @DPTR,A
    221          
    222              // Setup for the flash command's destination address - Group 1
    223              SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t) afAddrGroup;
   \   000035   7401         MOV     A,#0x1
   \   000037   90....       MOV     DPTR,#(SampleApp_Flash_DstAddr + 8)
   \   00003A   F0           MOVX    @DPTR,A
    224              SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003B   7414         MOV     A,#0x14
   \   00003D   90....       MOV     DPTR,#(SampleApp_Flash_DstAddr + 9)
   \   000040   F0           MOVX    @DPTR,A
    225              SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000041   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000044   7401         MOV     A,#0x1
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E4           CLR     A
   \   000049   F0           MOVX    @DPTR,A
    226          
    227              // Fill out the endpoint description.
    228              SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00004A   7414         MOV     A,#0x14
   \   00004C   90....       MOV     DPTR,#SampleApp_epDesc
   \   00004F   F0           MOVX    @DPTR,A
    229              SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000050   90....       MOV     DPTR,#(SampleApp_epDesc + 1)
   \   000053   74..         MOV     A,#(SampleApp_TaskID & 0xff)
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   74..         MOV     A,#((SampleApp_TaskID >> 8) & 0xff)
   \   000059   F0           MOVX    @DPTR,A
    230              SampleApp_epDesc.simpleDesc
    231                      = (SimpleDescriptionFormat_t * ) & SampleApp_SimpleDesc;
   \   00005A   90....       MOV     DPTR,#(SampleApp_epDesc + 3)
   \   00005D   74..         MOV     A,#(SampleApp_SimpleDesc & 0xff)
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   74..         MOV     A,#((SampleApp_SimpleDesc >> 8) & 0xff)
   \   000063   F0           MOVX    @DPTR,A
    232              SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000064   E4           CLR     A
   \   000065   90....       MOV     DPTR,#(SampleApp_epDesc + 5)
   \   000068   F0           MOVX    @DPTR,A
    233          
    234              // Register the endpoint description with the AF
    235              afRegister(&SampleApp_epDesc);
   \   000069                ; Setup parameters for call to function afRegister
   \   000069   7A..         MOV     R2,#(SampleApp_epDesc & 0xff)
   \   00006B   7B..         MOV     R3,#((SampleApp_epDesc >> 8) & 0xff)
   \   00006D   12....       LCALL   ??afRegister?relay
    236          
    237              // Register for all key events - This app will handle all key events
    238              RegisterForKeys(SampleApp_TaskID);
   \   000070                ; Setup parameters for call to function RegisterForKeys
   \   000070   90....       MOV     DPTR,#SampleApp_TaskID
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   12....       LCALL   ??RegisterForKeys?relay
    239              MT_UartRegisterTaskID(SampleApp_TaskID); //add by 1305106
   \   000078                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000078   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   12....       LCALL   ??MT_UartRegisterTaskID?relay
    240          
    241              // By default, all devices start out in Group 1
    242              SampleApp_Group.ID = 0x0001;
   \   000080   90....       MOV     DPTR,#SampleApp_Group
   \   000083   7401         MOV     A,#0x1
   \   000085   F0           MOVX    @DPTR,A
   \   000086   A3           INC     DPTR
   \   000087   E4           CLR     A
   \   000088   F0           MOVX    @DPTR,A
    243              osal_memcpy(SampleApp_Group.name, "Group 1", 7);
   \   000089                ; Setup parameters for call to function osal_memcpy
   \   000089   75....       MOV     ?V0 + 0,#(`?<Constant "Group 1">` & 0xff)
   \   00008C   75....       MOV     ?V0 + 1,#((`?<Constant "Group 1">` >> 8) & 0xff)
   \   00008F   F5..         MOV     ?V0 + 2,A
   \   000091   78..         MOV     R0,#?V0 + 0
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000096   7C07         MOV     R4,#0x7
   \   000098   7D00         MOV     R5,#0x0
   \   00009A   7A..         MOV     R2,#((SampleApp_Group + 2) & 0xff)
   \   00009C   7B..         MOV     R3,#(((SampleApp_Group + 2) >> 8) & 0xff)
   \   00009E   12....       LCALL   ??osal_memcpy?relay
   \   0000A1   7403         MOV     A,#0x3
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
    244              aps_AddGroup(SAMPLEAPP_ENDPOINT, &SampleApp_Group);
   \   0000A6                ; Setup parameters for call to function aps_AddGroup
   \   0000A6   7A..         MOV     R2,#(SampleApp_Group & 0xff)
   \   0000A8   7B..         MOV     R3,#((SampleApp_Group >> 8) & 0xff)
   \   0000AA   7914         MOV     R1,#0x14
   \   0000AC   12....       LCALL   ??aps_AddGroup?relay
    245          
    246          #if defined ( LCD_SUPPORTED )
    247              HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000AF                ; Setup parameters for call to function HalLcdWriteString
   \   0000AF   7901         MOV     R1,#0x1
   \   0000B1   7A..         MOV     R2,#(`?<Constant "SampleApp">` & 0xff)
   \   0000B3   7B..         MOV     R3,#((`?<Constant "SampleApp">` >> 8) & 0xff)
   \   0000B5   12....       LCALL   ??HalLcdWriteString?relay
    248          #endif
    249          
    250              SensorIO_Init();
   \   0000B8                ; Setup parameters for call to function SensorIO_Init
   \   0000B8   12....       LCALL   ??SensorIO_Init?relay
    251          }
   \   0000BB   7F03         MOV     R7,#0x3
   \   0000BD   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   90....       MOV     DPTR,#(SampleApp_Periodic_DstAddr + 8)
   \   000003   F0           MOVX    @DPTR,A
   \   000004   7414         MOV     A,#0x14
   \   000006   90....       MOV     DPTR,#(SampleApp_Periodic_DstAddr + 9)
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00000D   22           RET
    252          
    253          /*********************************************************************
    254           * @fn      SampleApp_ProcessEvent
    255           *
    256           * @brief   Generic Application Task event processor.  This function
    257           *          is called to process all events for the task.  Events
    258           *          include timers, messages and any other user defined events.
    259           *
    260           * @param   task_id  - The OSAL assigned task ID.
    261           * @param   events - events to process.  This is a bit map and can
    262           *                   contain more than one event.
    263           *
    264           * @return  none
    265           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    266          uint16 SampleApp_ProcessEvent(uint8 task_id, uint16 events) {
   \                     SampleApp_ProcessEvent:
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    267              afIncomingMSGPacket_t *MSGpkt;
    268              (void) task_id; // Intentionally unreferenced parameter
    269          
    270              if (events & SYS_EVENT_MSG) {
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??SampleApp_ProcessEvent_0
   \   000010   E9           MOV     A,R1
   \                     ??SampleApp_ProcessEvent_0:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??SampleApp_ProcessEvent_1 & 0xFFFF
    271                  MSGpkt = (afIncomingMSGPacket_t *) osal_msg_receive(SampleApp_TaskID);
   \   000016                ; Setup parameters for call to function osal_msg_receive
   \   000016   8038         SJMP    ??SampleApp_ProcessEvent_2
    272                  while (MSGpkt) {
    273                      switch (MSGpkt->hdr.event) {
    274                          // Received when a key is pressed
    275                          case KEY_CHANGE:
    276                              SampleApp_HandleKeys(((keyChange_t *) MSGpkt)->state, ((keyChange_t
    277                              *) MSGpkt)->keys);
    278                              break;
    279          
    280                              // Received when a messages is received (OTA) for this endpoint
    281                          case AF_INCOMING_MSG_CMD:
    282                              SampleApp_MessageMSGCB(MSGpkt);
    283                              break;;
    284          
    285                          case SPI_INCOMING_ZAPP_DATA:
    286                              SampleApp_ProcessMTMessage(MSGpkt);
    287                              MT_UartAppFlowControl(MT_UART_ZAPP_RX_READY);
    288                              break;
    289          
    290                              // Received whenever the device changes state in the network
    291                          case ZDO_STATE_CHANGE:
    292                              SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_3:
   \   000018   85..82       MOV     DPL,?V0 + 0
   \   00001B   85..83       MOV     DPH,?V0 + 1
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   90....       MOV     DPTR,#SampleApp_NwkState
   \   000023   F0           MOVX    @DPTR,A
    293                              if ((SampleApp_NwkState == DEV_ZB_COORD)
    294                                  || (SampleApp_NwkState == DEV_ROUTER)
    295                                  || (SampleApp_NwkState == DEV_END_DEVICE)) {
   \   000024   6409         XRL     A,#0x9
   \   000026   600A         JZ      ??SampleApp_ProcessEvent_4
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6407         XRL     A,#0x7
   \   00002B   6005         JZ      ??SampleApp_ProcessEvent_4
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6406         XRL     A,#0x6
   \   000030   7017         JNZ     ??SampleApp_ProcessEvent_5
    296                                  // Start sending the periodic message in a regular interval.
    297                                  HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \                     ??SampleApp_ProcessEvent_4:
   \   000032                ; Setup parameters for call to function HalLedSet
   \   000032   7A01         MOV     R2,#0x1
   \   000034   7901         MOV     R1,#0x1
   \   000036   12....       LCALL   ??HalLedSet?relay
    298                                  osal_start_timerEx(SampleApp_TaskID,
    299                                                     SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    300                                                     SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT);
   \   000039                ; Setup parameters for call to function osal_start_timerEx
   \   000039   7C88         MOV     R4,#-0x78
   \   00003B   7D13         MOV     R5,#0x13
   \   00003D   7A01         MOV     R2,#0x1
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   90....       MOV     DPTR,#SampleApp_TaskID
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   ??osal_start_timerEx?relay
    301                              } else {
    302                                  // Device is no longer in the network
    303                              }
    304                              break;
    305          
    306                          default:
    307                              break;
    308                      }
    309                      osal_msg_deallocate((uint8 *) MSGpkt); // Release the memory
   \                     ??SampleApp_ProcessEvent_5:
   \   000049                ; Setup parameters for call to function osal_msg_deallocate
   \   000049   AA..         MOV     R2,?V0 + 0
   \   00004B   AB..         MOV     R3,?V0 + 1
   \   00004D   12....       LCALL   ??osal_msg_deallocate?relay
    310                      MSGpkt = (afIncomingMSGPacket_t *) osal_msg_receive(SampleApp_TaskID); // Next -if oneis available
   \   000050                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_2:
   \   000050   90....       MOV     DPTR,#SampleApp_TaskID
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   12....       LCALL   ??osal_msg_receive?relay
   \   000058   8A..         MOV     ?V0 + 0,R2
   \   00005A   8B..         MOV     ?V0 + 1,R3
   \   00005C   E5..         MOV     A,?V0 + 0
   \   00005E   7002         JNZ     ??SampleApp_ProcessEvent_6
   \   000060   E5..         MOV     A,?V0 + 1
   \                     ??SampleApp_ProcessEvent_6:
   \   000062   604B         JZ      ??SampleApp_ProcessEvent_7
   \   000064   85..82       MOV     DPL,?V0 + 0
   \   000067   85..83       MOV     DPH,?V0 + 1
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for SampleApp_ProcessEvent>_0`:
   \   00006E   00           DB        0
   \   00006F   04           DB        4
   \   000070   1A           DB        26
   \   000071   ....         DW        ??SampleApp_ProcessEvent_8
   \   000073   22           DB        34
   \   000074   ....         DW        ??SampleApp_ProcessEvent_9
   \   000076   C0           DB        192
   \   000077   ....         DW        ??SampleApp_ProcessEvent_10
   \   000079   D1           DB        209
   \   00007A   ....         DW        ??SampleApp_ProcessEvent_3
   \   00007C   ....         DW        ??SampleApp_ProcessEvent_5
   \                     ??SampleApp_ProcessEvent_10:
   \   00007E                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00007E   85..82       MOV     DPL,?V0 + 0
   \   000081   85..83       MOV     DPH,?V0 + 1
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   FA           MOV     R2,A
   \   000089   85..82       MOV     DPL,?V0 + 0
   \   00008C   85..83       MOV     DPH,?V0 + 1
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F9           MOV     R1,A
   \   000093   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000096   80B1         SJMP    ??SampleApp_ProcessEvent_5
   \                     ??SampleApp_ProcessEvent_8:
   \   000098                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000098   AA..         MOV     R2,?V0 + 0
   \   00009A   AB..         MOV     R3,?V0 + 1
   \   00009C   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00009F   80A8         SJMP    ??SampleApp_ProcessEvent_5
   \                     ??SampleApp_ProcessEvent_9:
   \   0000A1                ; Setup parameters for call to function SampleApp_ProcessMTMessage
   \   0000A1   AA..         MOV     R2,?V0 + 0
   \   0000A3   AB..         MOV     R3,?V0 + 1
   \   0000A5   12....       LCALL   ??SampleApp_ProcessMTMessage?relay
   \   0000A8                ; Setup parameters for call to function MT_UartAppFlowControl
   \   0000A8   7901         MOV     R1,#0x1
   \   0000AA   12....       LCALL   ??MT_UartAppFlowControl?relay
   \   0000AD   809A         SJMP    ??SampleApp_ProcessEvent_5
    311                  }
    312          
    313                  return (events ^ SYS_EVENT_MSG); // return unprocessed events
   \                     ??SampleApp_ProcessEvent_7:
   \   0000AF   EE           MOV     A,R6
   \   0000B0   FA           MOV     R2,A
   \   0000B1   7480         MOV     A,#-0x80
   \   0000B3   6F           XRL     A,R7
   \                     ??SampleApp_ProcessEvent_11:
   \   0000B4   FB           MOV     R3,A
   \   0000B5   803A         SJMP    ??SampleApp_ProcessEvent_12
    314              }
    315          
    316              // Send a message out - This event is generated by a timer
    317              // (setup in SampleApp_Init()).
    318              if (events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT) {
   \                     ??SampleApp_ProcessEvent_1:
   \   0000B7   EE           MOV     A,R6
   \   0000B8   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000BA   5026         JNC     ??SampleApp_ProcessEvent_13
    319                  SampleApp_SendPeriodicMessage(); // Send the periodic message
   \   0000BC                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   0000BC   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    320                  // Setup to send message again in normal period (+ a little jitter)
    321                  osal_start_timerEx(SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    322                                     (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)));
   \   0000BF                ; Setup parameters for call to function osal_rand
   \   0000BF   12....       LCALL   ??osal_rand?relay
   \   0000C2   8A..         MOV     ?V0 + 0,R2
   \   0000C4   A8..         MOV     R0,?V0 + 0
   \   0000C6                ; Setup parameters for call to function osal_start_timerEx
   \   0000C6   7488         MOV     A,#-0x78
   \   0000C8   28           ADD     A,R0
   \   0000C9   FC           MOV     R4,A
   \   0000CA   7413         MOV     A,#0x13
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   FD           MOV     R5,A
   \   0000CF   7A01         MOV     R2,#0x1
   \   0000D1   7B00         MOV     R3,#0x0
   \   0000D3   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   F9           MOV     R1,A
   \   0000D8   12....       LCALL   ??osal_start_timerEx?relay
    323                  return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT); // return unprocessed events
   \   0000DB   7401         MOV     A,#0x1
   \                     ??SampleApp_ProcessEvent_14:
   \   0000DD   6E           XRL     A,R6
   \   0000DE   FA           MOV     R2,A
   \   0000DF   EF           MOV     A,R7
   \   0000E0   80D2         SJMP    ??SampleApp_ProcessEvent_11
    324              }
    325          
    326              if (events & SAMPLEAPP_SEND_SENSOR_INT_EVT) {
   \                     ??SampleApp_ProcessEvent_13:
   \   0000E2   5402         ANL     A,#0x2
   \   0000E4   6007         JZ      ??SampleApp_ProcessEvent_15
    327                  // report sensor interript status info
    328                  SampleApp_Process_SensorInt();
   \   0000E6                ; Setup parameters for call to function SampleApp_Process_SensorInt
   \   0000E6   12....       LCALL   ??SampleApp_Process_SensorInt?relay
    329                  return (events ^ SAMPLEAPP_SEND_SENSOR_INT_EVT);
   \   0000E9   7402         MOV     A,#0x2
   \   0000EB   80F0         SJMP    ??SampleApp_ProcessEvent_14
    330              }
    331              return 0; // Discard unknown events
   \                     ??SampleApp_ProcessEvent_15:
   \   0000ED   7A00         MOV     R2,#0x0
   \   0000EF   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_12:
   \   0000F1                REQUIRE ?Subroutine7
   \   0000F1                ; // Fall through to label ?Subroutine7
    332          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    333          
    334          /*********************************************************************
    335           * Event Generation Functions
    336           */
    337          /*********************************************************************
    338           * @fn      SampleApp_HandleKeys
    339           *
    340           * @brief   Handles all key events for this device.
    341           *
    342           * @param   shift - true if in shift/alt.
    343           * @param   keys - bit field for key events. Valid entries:
    344           *                 HAL_KEY_SW_2
    345           *                 HAL_KEY_SW_1
    346           *
    347           * @return  none
    348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    349          void SampleApp_HandleKeys(uint8 shift, uint8 keys) {
   \                     SampleApp_HandleKeys:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    350              (void) shift;  // Intentionally unreferenced parameter
    351          
    352              if (keys & HAL_KEY_SW_6) {
   \   000007   A2E5         MOV     C,0xE0 /* A   */.5
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    353                  /* This key sends the Flash Command is sent to Group 1.
    354                   * This device will not receive the Flash Command from this
    355                   * device (even if it belongs to group 1).
    356                   */
    357                  SampleApp_SendFlashMessage(SAMPLEAPP_FLASH_DURATION);
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    358              }
    359          
    360              if (keys & HAL_KEY_SW_2) {
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5023         JNC     ??SampleApp_HandleKeys_1
    361                  /* The Flashr Command is sent to Group 1.
    362                   * This key toggles this device in and out of group 1.
    363                   * If this device doesn't belong to group 1, this application
    364                   * will not receive the Flash command sent to group 1.
    365                   */
    366                  aps_Group_t *grp;
    367                  grp = aps_FindGroup(SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP);
    368                  if (grp) {
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   EA           MOV     A,R2
   \   000021   7001         JNZ     ??SampleApp_HandleKeys_2
   \   000023   EB           MOV     A,R3
   \                     ??SampleApp_HandleKeys_2:
   \   000024   600B         JZ      ??SampleApp_HandleKeys_3
    369                      // Remove from the group
    370                      aps_RemoveGroup(SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP);
   \   000026                ; Setup parameters for call to function aps_RemoveGroup
   \   000026   7A01         MOV     R2,#0x1
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   7914         MOV     R1,#0x14
   \   00002C   12....       LCALL   ??aps_RemoveGroup?relay
   \   00002F   8009         SJMP    ??SampleApp_HandleKeys_1
    371                  } else {
    372                      // Add to the flash group
    373                      aps_AddGroup(SAMPLEAPP_ENDPOINT, &SampleApp_Group);
   \                     ??SampleApp_HandleKeys_3:
   \   000031                ; Setup parameters for call to function aps_AddGroup
   \   000031   7A..         MOV     R2,#(SampleApp_Group & 0xff)
   \   000033   7B..         MOV     R3,#((SampleApp_Group >> 8) & 0xff)
   \   000035   7914         MOV     R1,#0x14
   \   000037   12....       LCALL   ??aps_AddGroup?relay
    374                  }
    375              }
    376          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003A   02....       LJMP    ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    377          
    378          /*********************************************************************
    379           * LOCAL FUNCTIONS
    380           */
    381          
    382          /*********************************************************************
    383           * @fn      SampleApp_MessageMSGCB
    384           *
    385           * @brief   Data message processor callback.  This function processes
    386           *          any incoming data - probably from other devices.  So, based
    387           *          on cluster ID, perform the intended action.
    388           *
    389           * @param   none
    390           *
    391           * @return  none
    392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          void SampleApp_MessageMSGCB(afIncomingMSGPacket_t *pkt) {
   \                     SampleApp_MessageMSGCB:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    394              uint16 flashTime;
    395              char *buf;
    396          
    397              switch (pkt->clusterId) {
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 1,A
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000019   0100         DW        1
   \   00001B   03           DB        3
   \   00001C   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00001E   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_2
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_3
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_4
    398                  case SAMPLEAPP_PERIODIC_CLUSTERID:
    399                      buf = pkt->cmd.Data;
                                 ^
Warning[Pe513]: a value of type "unsigned char *" cannot be assigned to an
          entity of type "char *"
   \                     ??SampleApp_MessageMSGCB_1:
   \   000026   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000029   FE           MOV     R6,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   FF           MOV     R7,A
    400                      HalUARTWrite(0, "temp:", 5);
   \   00002D                ; Setup parameters for call to function HalUARTWrite
   \   00002D   7C05         MOV     R4,#0x5
   \   00002F   7D00         MOV     R5,#0x0
   \   000031   7A..         MOV     R2,#(`?<Constant "temp:">` & 0xff)
   \   000033   7B..         MOV     R3,#((`?<Constant "temp:">` >> 8) & 0xff)
   \   000035   12....       LCALL   ?Subroutine5 & 0xFFFF
    401                      HalUARTWrite(0, buf, 7);
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??CrossCallReturnLabel_14:
   \   000038   FA           MOV     R2,A
   \   000039   EF           MOV     A,R7
   \   00003A   FB           MOV     R3,A
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   12....       LCALL   ??HalUARTWrite?relay
    402                      HalUARTWrite(0, "humi:", 5);
   \   000040                ; Setup parameters for call to function HalUARTWrite
   \   000040   7C05         MOV     R4,#0x5
   \   000042   7D00         MOV     R5,#0x0
   \   000044   7A..         MOV     R2,#(`?<Constant "humi:">` & 0xff)
   \   000046   7B..         MOV     R3,#((`?<Constant "humi:">` >> 8) & 0xff)
   \   000048   12....       LCALL   ?Subroutine5 & 0xFFFF
    403                      HalUARTWrite(0, buf + 7, 7);
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??CrossCallReturnLabel_15:
   \   00004B   2407         ADD     A,#0x7
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   3400         ADDC    A,#0x0
   \   000051   FB           MOV     R3,A
   \   000052   7900         MOV     R1,#0x0
   \   000054   12....       LCALL   ??HalUARTWrite?relay
   \   000057   8040         SJMP    ??SampleApp_MessageMSGCB_0
    404                      break;
    405          
    406                  case SAMPLEAPP_FLASH_CLUSTERID:
    407                      flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2]);
    408                      HalLedBlink(HAL_LED_4, 4, 50, (flashTime / 4));
   \                     ??SampleApp_MessageMSGCB_2:
   \   000059   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00005C   F9           MOV     R1,A
   \   00005D                ; Setup parameters for call to function HalLedBlink
   \   00005D   8882         MOV     DPL,R0
   \   00005F   8983         MOV     DPH,R1
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FA           MOV     R2,A
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F9           MOV     R1,A
   \   00006C   EA           MOV     A,R2
   \   00006D   F5..         MOV     ?V0 + 0,A
   \   00006F   E9           MOV     A,R1
   \   000070   F5..         MOV     ?V0 + 1,A
   \   000072   7402         MOV     A,#0x2
   \   000074   78..         MOV     R0,#?V0 + 0
   \   000076   12....       LCALL   ?US_SHR
   \   000079   AC..         MOV     R4,?V0 + 0
   \   00007B   AD..         MOV     R5,?V0 + 1
   \   00007D   7B32         MOV     R3,#0x32
   \   00007F   7A04         MOV     R2,#0x4
   \   000081   7908         MOV     R1,#0x8
   \   000083   12....       LCALL   ??HalLedBlink?relay
   \   000086   8011         SJMP    ??SampleApp_MessageMSGCB_0
    409                      break;
    410          
    411                  case SAMPLEAPP_LEDCTL_CLUSTERID:
    412                      SetLedStatus(pkt->cmd.Data[0]);
   \                     ??SampleApp_MessageMSGCB_4:
   \   000088                ; Setup parameters for call to function SetLedStatus
   \   000088   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00008B   F583         MOV     DPH,A
   \   00008D   8882         MOV     DPL,R0
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F9           MOV     R1,A
   \   000091   12....       LCALL   ??SetLedStatus?relay
   \   000094   8003         SJMP    ??SampleApp_MessageMSGCB_0
    413                      break;
    414          
    415                  case SAMPLEAPP_SENDINT_CLUSTERID:
    416                      SampleApp_ProcessIntMessage(pkt);
   \                     ??SampleApp_MessageMSGCB_3:
   \   000096                ; Setup parameters for call to function SampleApp_ProcessIntMessage
   \   000096   12....       LCALL   ??SampleApp_ProcessIntMessage?relay
    417                      break;
    418              }
    419          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000099   02....       LJMP    ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C07         MOV     R4,#0x7
   \   000007   7D00         MOV     R5,#0x0
   \   000009   EE           MOV     A,R6
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EA           MOV     A,R2
   \   000001   2421         ADD     A,#0x21
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    420          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    421          float abtTime = 0;
   \                     abtTime:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    422          float forceoffnum1led = 0;
   \                     forceoffnum1led:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    423          float forceoffnum2led = 0;
   \                     forceoffnum2led:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    424          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    425          void SampleApp_ProcessIntMessage(afIncomingMSGPacket_t *pkt) {
   \                     SampleApp_ProcessIntMessage:
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    426          //    HalUARTWrite(0, "\rinterrupt!\r", 14);
    427              HalUARTWrite(0, "interrupt", 15);
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C0F         MOV     R4,#0xf
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#(`?<Constant "interrupt">` & 0xff)
   \   00000B   7B..         MOV     R3,#((`?<Constant "interrupt">` >> 8) & 0xff)
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
    428          
    429              if (abtTime > 5) {
   \   000012   90....       MOV     DPTR,#abtTime
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?L_MOV_X
   \   00001A   90....       MOV     DPTR,#__Constant_40a00001
   \   00001D   78..         MOV     R0,#?V0 + 4
   \   00001F   12....       LCALL   ?L_MOV_X
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   79..         MOV     R1,#?V0 + 4
   \   000026   12....       LCALL   ?FLT_GE
   \   000029   500D         JNC     ??SampleApp_ProcessIntMessage_0
    430          //        if (forceoffnum2led == 0) {
    431                  HalUARTWrite(0, "abnormalnum2", 12);
   \   00002B                ; Setup parameters for call to function HalUARTWrite
   \   00002B   7C0C         MOV     R4,#0xc
   \   00002D   7D00         MOV     R5,#0x0
   \   00002F   7A..         MOV     R2,#(`?<Constant "abnormalnum2">` & 0xff)
   \   000031   7B..         MOV     R3,#((`?<Constant "abnormalnum2">` >> 8) & 0xff)
   \   000033   7900         MOV     R1,#0x0
   \   000035   12....       LCALL   ??HalUARTWrite?relay
    432          //        }
    433              }
    434          
    435              if (abtTime == 0) {
   \                     ??SampleApp_ProcessIntMessage_0:
   \   000038   90....       MOV     DPTR,#abtTime
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?L_MOV_X
   \   000040   90....       MOV     DPTR,#__Constant_0
   \   000043   78..         MOV     R0,#?V0 + 4
   \   000045   12....       LCALL   ?L_MOV_X
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   79..         MOV     R1,#?V0 + 4
   \   00004C   12....       LCALL   ?FLT_EQ
   \   00004F   700D         JNZ     ??SampleApp_ProcessIntMessage_1
    436          //        if (forceoffnum2led == 0) {
    437                  HalUARTWrite(0, "relievenum2", 11);
   \   000051                ; Setup parameters for call to function HalUARTWrite
   \   000051   7C0B         MOV     R4,#0xb
   \   000053   7D00         MOV     R5,#0x0
   \   000055   7A..         MOV     R2,#(`?<Constant "relievenum2">` & 0xff)
   \   000057   7B..         MOV     R3,#((`?<Constant "relievenum2">` >> 8) & 0xff)
   \   000059   7900         MOV     R1,#0x0
   \   00005B   12....       LCALL   ??HalUARTWrite?relay
    438          //        }
    439              }
    440          
    441              abtTime++;
   \                     ??SampleApp_ProcessIntMessage_1:
   \   00005E   90....       MOV     DPTR,#abtTime
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?L_MOV_X
   \   000066   90....       MOV     DPTR,#__Constant_3f800000
   \   000069   78..         MOV     R0,#?V0 + 4
   \   00006B   12....       LCALL   ?L_MOV_X
   \   00006E   78..         MOV     R0,#?V0 + 0
   \   000070   79..         MOV     R1,#?V0 + 4
   \   000072   12....       LCALL   ?FLT_ADD
   \   000075   90....       MOV     DPTR,#abtTime
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   12....       LCALL   ?L_MOV_TO_X
    442              HalLedBlink(HAL_LED_1, 4, 50, (1000 / 4));
   \   00007D                ; Setup parameters for call to function HalLedBlink
   \   00007D   7CFA         MOV     R4,#-0x6
   \   00007F   7D00         MOV     R5,#0x0
   \   000081   7B32         MOV     R3,#0x32
   \   000083   7A04         MOV     R2,#0x4
   \   000085   7901         MOV     R1,#0x1
   \   000087   12....       LCALL   ??HalLedBlink?relay
    443          }
   \   00008A                REQUIRE ?Subroutine9
   \   00008A                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    444          
    445          /*********************************************************************
    446           * @fn      SampleApp_SendPeriodicMessage
    447           *
    448           * @brief   Send the periodic message.
    449           *
    450           * @param   none
    451           *
    452           * @return  none
    453           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    454          void SampleApp_SendPeriodicMessage(void) {
   \                     SampleApp_SendPeriodicMessage:
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 36
   \   000005   74DC         MOV     A,#-0x24
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    455              char temp_buf[7];
    456              char humi_buf[7];
    457              char i;
    458              char buf[14];
    459              float humi, temp;
    460          
    461              if (GetHumiAndTemp(&humi, &temp) == 0) {
   \   00000A                ; Setup parameters for call to function GetHumiAndTemp
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7404         MOV     A,#0x4
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   AA82         MOV     R2,DPL
   \   00001B   AB83         MOV     R3,DPH
   \   00001D   12....       LCALL   ??GetHumiAndTemp?relay
   \   000020   E9           MOV     A,R1
   \   000021   6003         JZ      $+5
   \   000023   02....       LJMP    ??SampleApp_SendPeriodicMessage_0 & 0xFFFF
    462                  sprintf(humi_buf, (char *) "%f", humi);
   \   000026                ; Setup parameters for call to function sprintf
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00002E   7C..         MOV     R4,#(`?<Constant "%f">` & 0xff)
   \   000030   7D..         MOV     R5,#((`?<Constant "%f">` >> 8) & 0xff)
   \   000032   740C         MOV     A,#0xc
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   AA82         MOV     R2,DPL
   \   000039   AB83         MOV     R3,DPH
   \   00003B   12....       LCALL   ??sprintf?relay
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
    463                  sprintf(temp_buf, (char *) "%f", temp);
   \   000043                ; Setup parameters for call to function sprintf
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00004C   7C..         MOV     R4,#(`?<Constant "%f">` & 0xff)
   \   00004E   7D..         MOV     R5,#((`?<Constant "%f">` >> 8) & 0xff)
   \   000050   7413         MOV     A,#0x13
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   AA82         MOV     R2,DPL
   \   000057   AB83         MOV     R3,DPH
   \   000059   12....       LCALL   ??sprintf?relay
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
    464          
    465                  for (i = 0; i < 7; i++) {
   \   000061   7C00         MOV     R4,#0x0
    466                      buf[i] = temp_buf[i];
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   000063   8C82         MOV     DPL,R4
   \   000065   AA82         MOV     R2,DPL
   \   000067   7416         MOV     A,#0x16
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   E582         MOV     A,DPL
   \   00006E   2A           ADD     A,R2
   \   00006F   F8           MOV     R0,A
   \   000070   E583         MOV     A,DPH
   \   000072   3400         ADDC    A,#0x0
   \   000074   F9           MOV     R1,A
   \   000075   740F         MOV     A,#0xf
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00007D   F0           MOVX    @DPTR,A
    467                      buf[i + 7] = humi_buf[i];
   \   00007E   7408         MOV     A,#0x8
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   12....       LCALL   ?Subroutine2 & 0xFFFF
    468                  }
   \                     ??CrossCallReturnLabel_5:
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   0C           INC     R4
   \   00008F   EC           MOV     A,R4
   \   000090   C3           CLR     C
   \   000091   9407         SUBB    A,#0x7
   \   000093   40CE         JC      ??SampleApp_SendPeriodicMessage_1
    469          
    470                  if (humi > 60 && temp > 25) {
   \   000095   7404         MOV     A,#0x4
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?L_MOV_X
   \   00009F   90....       MOV     DPTR,#__Constant_42700001
   \   0000A2   78..         MOV     R0,#?V0 + 4
   \   0000A4   12....       LCALL   ?L_MOV_X
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   79..         MOV     R1,#?V0 + 4
   \   0000AB   12....       LCALL   ?FLT_GE
   \   0000AE   5032         JNC     ??SampleApp_SendPeriodicMessage_2
   \   0000B0   85..82       MOV     DPL,?XSP + 0
   \   0000B3   85..83       MOV     DPH,?XSP + 1
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?L_MOV_X
   \   0000BB   90....       MOV     DPTR,#__Constant_41c80001
   \   0000BE   78..         MOV     R0,#?V0 + 4
   \   0000C0   12....       LCALL   ?L_MOV_X
   \   0000C3   78..         MOV     R0,#?V0 + 0
   \   0000C5   79..         MOV     R1,#?V0 + 4
   \   0000C7   12....       LCALL   ?FLT_GE
   \   0000CA   5016         JNC     ??SampleApp_SendPeriodicMessage_2
    471          //            if (forceoffnum1led == 0) {
    472                          HalUARTWrite(0, "abnormalnum1", 12);
   \   0000CC                ; Setup parameters for call to function HalUARTWrite
   \   0000CC   7C0C         MOV     R4,#0xc
   \   0000CE   7D00         MOV     R5,#0x0
   \   0000D0   7A..         MOV     R2,#(`?<Constant "abnormalnum1">` & 0xff)
   \   0000D2   7B..         MOV     R3,#((`?<Constant "abnormalnum1">` >> 8) & 0xff)
   \   0000D4   7900         MOV     R1,#0x0
   \   0000D6   12....       LCALL   ??HalUARTWrite?relay
    473                          HalLedSet(HAL_LED_2, HAL_LED_MODE_FLASH);
   \   0000D9                ; Setup parameters for call to function HalLedSet
   \   0000D9   7A04         MOV     R2,#0x4
   \   0000DB   7902         MOV     R1,#0x2
   \   0000DD   12....       LCALL   ??HalLedSet?relay
   \   0000E0   800D         SJMP    ??SampleApp_SendPeriodicMessage_3
    474          //            }
    475                  } else {
    476          //            if (forceoffnum1led == 0) {
    477                          HalUARTWrite(0, "relievenum1", 11);
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   0000E2                ; Setup parameters for call to function HalUARTWrite
   \   0000E2   7C0B         MOV     R4,#0xb
   \   0000E4   7D00         MOV     R5,#0x0
   \   0000E6   7A..         MOV     R2,#(`?<Constant "relievenum1">` & 0xff)
   \   0000E8   7B..         MOV     R3,#((`?<Constant "relievenum1">` >> 8) & 0xff)
   \   0000EA   7900         MOV     R1,#0x0
   \   0000EC   12....       LCALL   ??HalUARTWrite?relay
    478          //            }
    479                  }
    480          
    481                  AF_DataRequest(&SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    482                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    483                                 14,
    484                                 (unsigned char *) buf,
    485                                 &SampleApp_TransID,
    486                                 AF_DISCV_ROUTE,
    487                                 AF_DEFAULT_RADIUS);
   \                     ??SampleApp_SendPeriodicMessage_3:
   \   0000EF                ; Setup parameters for call to function AF_DataRequest
   \   0000EF   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000F2   78..         MOV     R0,#?V0 + 0
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F7   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   0000FA   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   0000FD   78..         MOV     R0,#?V0 + 0
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000102   7419         MOV     A,#0x19
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   8582..       MOV     ?V0 + 0,DPL
   \   00010A   8583..       MOV     ?V0 + 1,DPH
   \   00010D   78..         MOV     R0,#?V0 + 0
   \   00010F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000112   75..0E       MOV     ?V0 + 0,#0xe
   \   000115   75..00       MOV     ?V0 + 1,#0x0
   \   000118   78..         MOV     R0,#?V0 + 0
   \   00011A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011D   75..01       MOV     ?V0 + 0,#0x1
   \   000120   78..         MOV     R0,#?V0 + 0
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000125   12....       LCALL   ?Subroutine4 & 0xFFFF
    488              }
   \                     ??CrossCallReturnLabel_18:
   \   000128   12....       LCALL   ?DEALLOC_XSTACK8
    489          
    490              if (AF_DataRequest(&SampleApp_Periodic_DstAddr, &SampleApp_epDesc, SAMPLEAPP_PERIODIC_CLUSTERID, 1,
    491                                 (uint8 * ) & SampleAppPeriodicCounter,
    492                                 &SampleApp_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS) == afStatus_SUCCESS) {
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   00012B                ; Setup parameters for call to function AF_DataRequest
   \   00012B   75..1E       MOV     ?V0 + 0,#0x1e
   \   00012E   78..         MOV     R0,#?V0 + 0
   \   000130   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000133   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000136   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000139   78..         MOV     R0,#?V0 + 0
   \   00013B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013E   75....       MOV     ?V0 + 0,#(SampleAppPeriodicCounter & 0xff)
   \   000141   75....       MOV     ?V0 + 1,#((SampleAppPeriodicCounter >> 8) & 0xff)
   \   000144   78..         MOV     R0,#?V0 + 0
   \   000146   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000149   75..01       MOV     ?V0 + 0,#0x1
   \   00014C   75..00       MOV     ?V0 + 1,#0x0
   \   00014F   78..         MOV     R0,#?V0 + 0
   \   000151   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000154   78..         MOV     R0,#?V0 + 0
   \   000156   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000159   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00015C   12....       LCALL   ?DEALLOC_XSTACK8
    493          
    494              } else {}
    495          }
   \   00015F   7424         MOV     A,#0x24
   \   000161   12....       LCALL   ?DEALLOC_XSTACK8
   \   000164   02....       LJMP    ?Subroutine9 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E582         MOV     A,DPL
   \   000002   2A           ADD     A,R2
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   3400         ADDC    A,#0x0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7920         MOV     R1,#0x20
   \   000002   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   000004   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   000006   7A..         MOV     R2,#(SampleApp_Periodic_DstAddr & 0xff)
   \   000008   7B..         MOV     R3,#((SampleApp_Periodic_DstAddr >> 8) & 0xff)
   \   00000A                REQUIRE ??Subroutine10_0
   \   00000A                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET
    496          
    497          /*********************************************************************
    498           * @fn      SampleApp_SendFlashMessage
    499           *
    500           * @brief   Send the flash message to group 1.
    501           *
    502           * @param   flashTime - in milliseconds
    503           *
    504           * @return  none
    505           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    506          void SampleApp_SendFlashMessage(uint16 flashTime) {
   \                     SampleApp_SendFlashMessage:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    507              uint8 buffer[3];
    508              buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    509              buffer[1] = LO_UINT16(flashTime);
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    510              buffer[2] = HI_UINT16(flashTime);
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    511          
    512              if (AF_DataRequest(&SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    513                                 SAMPLEAPP_FLASH_CLUSTERID,
    514                                 3,
    515                                 buffer,
    516                                 &SampleApp_TransID,
    517                                 AF_DISCV_ROUTE,
    518                                 AF_DEFAULT_RADIUS) == afStatus_SUCCESS) {
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000034   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   000063   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   000065   7A..         MOV     R2,#(SampleApp_Flash_DstAddr & 0xff)
   \   000067   7B..         MOV     R3,#((SampleApp_Flash_DstAddr >> 8) & 0xff)
   \   000069   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
    519              } else {
    520                  // Error occurred in request to send.
    521              }
    522          }
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074                REQUIRE ?Subroutine8
   \   000074                ; // Fall through to label ?Subroutine8
    523          
    524          /*********************************************************************
    525          *********************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    526          HAL_ISR_FUNCTION(halP12isr, P1INT_VECTOR
    527          ) {
   \                     halP12isr:
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 15
   \   000007                ; Auto size: 0
    528          if (P1IFG & 0x04) //�ж�
   \   000007   E58A         MOV     A,0x8a
   \   000009   A2E2         MOV     C,0xE0 /* A   */.2
   \   00000B   501C         JNC     ??halP12isr_0
    529          {
    530          gIntFlag = 0x01;
   \   00000D   7401         MOV     A,#0x1
   \   00000F   90....       MOV     DPTR,#gIntFlag
   \   000012   F0           MOVX    @DPTR,A
    531          //HalUARTWrite(0, "INT2", 6);
    532          osal_set_event(SampleApp_TaskID,
    533          SAMPLEAPP_SEND_SENSOR_INT_EVT);
   \   000013                ; Setup parameters for call to function osal_set_event
   \   000013   7A02         MOV     R2,#0x2
   \   000015   7B00         MOV     R3,#0x0
   \   000017   90....       MOV     DPTR,#SampleApp_TaskID
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   ??osal_set_event?relay
    534          Delay(100);
   \   00001F                ; Setup parameters for call to function Delay
   \   00001F   7A64         MOV     R2,#0x64
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   ??Delay?relay
    535          P1IFG &= ~(0x04);
   \   000026   538AFB       ANL     0x8a,#0xfb
    536          }
    537          P1IF = 0; //���жϱ�־
   \                     ??halP12isr_0:
   \   000029   C2EB         CLR     0xe8.3
    538          }
   \   00002B   7F01         MOV     R7,#0x1
   \   00002D   02....       LJMP    ?INTERRUPT_LEAVE_XSP
   \   000030                REQUIRE P1IFG
   \   000030                REQUIRE _A_IRCON2
    539          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    540          void SampleApp_Process_SensorInt(void) {
   \                     SampleApp_Process_SensorInt:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    541              // get sensor's status
    542              HalLedBlink(HAL_LED_1, 4, 50, (1000 / 4));
   \   000005                ; Setup parameters for call to function HalLedBlink
   \   000005   7CFA         MOV     R4,#-0x6
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7B32         MOV     R3,#0x32
   \   00000B   7A04         MOV     R2,#0x4
   \   00000D   7901         MOV     R1,#0x1
   \   00000F   12....       LCALL   ??HalLedBlink?relay
    543              SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t) Addr16Bit;
   \   000012   7402         MOV     A,#0x2
   \   000014   12....       LCALL   ?Subroutine1 & 0xFFFF
    544              SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    545              SampleApp_Periodic_DstAddr.addr.shortAddr = 0x0000;
   \                     ??CrossCallReturnLabel_3:
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   F0           MOVX    @DPTR,A
    546              if (AF_DataRequest(&SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    547                                 SAMPLEAPP_SENDINT_CLUSTERID,
    548                                 1,
    549                                 &gIntFlag,
    550                                 &SampleApp_TransID,// transfer id
    551                                 AF_DISCV_ROUTE,
    552                                 AF_DEFAULT_RADIUS) == afStatus_SUCCESS) {
   \   00001B                ; Setup parameters for call to function AF_DataRequest
   \   00001B   75..1E       MOV     ?V0 + 0,#0x1e
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000023   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000026   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75....       MOV     ?V0 + 0,#(gIntFlag & 0xff)
   \   000031   75....       MOV     ?V0 + 1,#((gIntFlag >> 8) & 0xff)
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   75..01       MOV     ?V0 + 0,#0x1
   \   00003C   75..00       MOV     ?V0 + 1,#0x0
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   75..03       MOV     ?V0 + 0,#0x3
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
    553                  //
    554              } else {
    555                  // Error occurred in request to send.
    556              }
    557              gIntFlag = 0x00;//recover int status flag.
   \   000052   E4           CLR     A
   \   000053   90....       MOV     DPTR,#gIntFlag
   \   000056   F0           MOVX    @DPTR,A
    558          }
   \   000057   80..         SJMP    ?Subroutine8
    559          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    560          void Delay(uint16 n) {
   \                     Delay:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    561              uint16 i, t;
    562              for (i = 0; i < 5; i++)
   \   000000   7C05         MOV     R4,#0x5
    563                  for (t = 0; t < n; t++);
   \                     ??Delay_0:
   \   000002   7800         MOV     R0,#0x0
   \   000004   7900         MOV     R1,#0x0
   \   000006   8008         SJMP    ??Delay_1
   \                     ??Delay_2:
   \   000008   E8           MOV     A,R0
   \   000009   2401         ADD     A,#0x1
   \   00000B   08           INC     R0
   \   00000C   E9           MOV     A,R1
   \   00000D   3400         ADDC    A,#0x0
   \   00000F   F9           MOV     R1,A
   \                     ??Delay_1:
   \   000010   C3           CLR     C
   \   000011   E8           MOV     A,R0
   \   000012   9A           SUBB    A,R2
   \   000013   E9           MOV     A,R1
   \   000014   9B           SUBB    A,R3
   \   000015   40F1         JC      ??Delay_2
   \   000017   1C           DEC     R4
   \   000018   EC           MOV     A,R4
   \   000019   70E7         JNZ     ??Delay_0
    564          }
   \   00001B   02....       LJMP    ?BRET
    565          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    566          void SensorIO_Init(void) {
   \                     SensorIO_Init:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    567              P1DIR &= ~(0x01 << 2);
   \   000000   53FEFB       ANL     0xfe,#0xfb
    568              P1INP &= ~(0x01 << 2);
   \   000003   53F6FB       ANL     0xf6,#0xfb
    569              P1IEN |= (0x01 << 2);
   \   000006   438D04       ORL     0x8d,#0x4
    570              PICTL &= ~(0x01 << 1);
   \   000009   538CFD       ANL     0x8c,#0xfd
    571              // PICTL |= (0x01<<1);
    572              IEN0 |= 0x80;
   \   00000C   D2AF         SETB    0xa8.7
    573              IEN2 |= (0x01 << 4);
   \   00000E   439A10       ORL     0x9a,#0x10
    574              IEN2 |= (0x01 << 4);
   \   000011   439A10       ORL     0x9a,#0x10
    575              P1IFG &= ~(0x01 << 2);
   \   000014   538AFB       ANL     0x8a,#0xfb
    576          }
   \   000017   02....       LJMP    ?BRET
   \   00001A                REQUIRE P1IEN
   \   00001A                REQUIRE PICTL
   \   00001A                REQUIRE P1IFG
   \   00001A                REQUIRE IEN2
   \   00001A                REQUIRE _A_IEN0
   \   00001A                REQUIRE P1INP
   \   00001A                REQUIRE P1DIR
    577          
    578          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    579          void SetLedStatus(uint8 status) {
   \                     SetLedStatus:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    580              if (status == 0x00) { // 42020xxxNum1Ledrelie ǿ�ƹر���ʪ�� led2 ��
   \   000004   E9           MOV     A,R1
   \   000005   7016         JNZ     ??SetLedStatus_0
    581                  HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF);
   \                     ??SetLedStatus_1:
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7902         MOV     R1,#0x2
   \   00000B   12....       LCALL   ??HalLedSet?relay
    582                  HalUARTWrite(0, "led1:off", 8);
   \   00000E                ; Setup parameters for call to function HalUARTWrite
   \   00000E   7C08         MOV     R4,#0x8
   \   000010   7D00         MOV     R5,#0x0
   \   000012   7A..         MOV     R2,#(`?<Constant "led1:off">` & 0xff)
   \   000014   7B..         MOV     R3,#((`?<Constant "led1:off">` >> 8) & 0xff)
   \                     ??SetLedStatus_2:
   \   000016   7900         MOV     R1,#0x0
   \   000018   12....       LCALL   ??HalUARTWrite?relay
   \   00001B   804C         SJMP    ??SetLedStatus_3
    583              } else if (status == 0x01) { // 42020xxxNum2Ledrelie ǿ�ƹرպ������ led2 ��
   \                     ??SetLedStatus_0:
   \   00001D   7401         MOV     A,#0x1
   \   00001F   69           XRL     A,R1
   \   000020   7011         JNZ     ??SetLedStatus_4
    584                  HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF);
   \                     ??SetLedStatus_5:
   \   000022                ; Setup parameters for call to function HalLedSet
   \   000022   7A00         MOV     R2,#0x0
   \   000024   7902         MOV     R1,#0x2
   \   000026   12....       LCALL   ??HalLedSet?relay
    585                  HalUARTWrite(0, "led2:off", 8);
   \   000029                ; Setup parameters for call to function HalUARTWrite
   \   000029   7C08         MOV     R4,#0x8
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A..         MOV     R2,#(`?<Constant "led2:off">` & 0xff)
   \   00002F   7B..         MOV     R3,#((`?<Constant "led2:off">` >> 8) & 0xff)
   \   000031   80E3         SJMP    ??SetLedStatus_2
    586              } else if (status == 0x02) { // 42020xxxNum1Ledon ������ʪ�� led2 ��
   \                     ??SetLedStatus_4:
   \   000033   7402         MOV     A,#0x2
   \   000035   69           XRL     A,R1
   \   000036   7011         JNZ     ??SetLedStatus_6
    587                  HalLedSet(HAL_LED_2, HAL_LED_MODE_ON);
   \   000038                ; Setup parameters for call to function HalLedSet
   \   000038   7A01         MOV     R2,#0x1
   \   00003A   7902         MOV     R1,#0x2
   \   00003C   12....       LCALL   ??HalLedSet?relay
    588                  HalUARTWrite(0, "led1:on", 7);
   \   00003F                ; Setup parameters for call to function HalUARTWrite
   \   00003F   7C07         MOV     R4,#0x7
   \   000041   7D00         MOV     R5,#0x0
   \   000043   7A..         MOV     R2,#(`?<Constant "led1:on">` & 0xff)
   \   000045   7B..         MOV     R3,#((`?<Constant "led1:on">` >> 8) & 0xff)
   \   000047   80CD         SJMP    ??SetLedStatus_2
    589              } else if (status == 0x03) { // 42020xxxNum1Ledoff �ر���ʪ�� led2 ��
   \                     ??SetLedStatus_6:
   \   000049   7403         MOV     A,#0x3
   \   00004B   69           XRL     A,R1
   \   00004C   60B9         JZ      ??SetLedStatus_1
    590                  HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF);
    591                  HalUARTWrite(0, "led1:off", 8);
    592              } else if (status == 0x04) { // 42020xxxNum2Ledon ����������� led2 ��
   \   00004E   7404         MOV     A,#0x4
   \   000050   69           XRL     A,R1
   \   000051   7011         JNZ     ??SetLedStatus_7
    593                  HalLedSet(HAL_LED_2, HAL_LED_MODE_ON);
   \   000053                ; Setup parameters for call to function HalLedSet
   \   000053   7A01         MOV     R2,#0x1
   \   000055   7902         MOV     R1,#0x2
   \   000057   12....       LCALL   ??HalLedSet?relay
    594                  HalUARTWrite(0, "led2:on", 7);
   \   00005A                ; Setup parameters for call to function HalUARTWrite
   \   00005A   7C07         MOV     R4,#0x7
   \   00005C   7D00         MOV     R5,#0x0
   \   00005E   7A..         MOV     R2,#(`?<Constant "led2:on">` & 0xff)
   \   000060   7B..         MOV     R3,#((`?<Constant "led2:on">` >> 8) & 0xff)
   \   000062   80B2         SJMP    ??SetLedStatus_2
    595              } else if (status == 0x05) { // 42020xxxNum2Ledoff �رպ������ led2 ��
   \                     ??SetLedStatus_7:
   \   000064   7405         MOV     A,#0x5
   \   000066   69           XRL     A,R1
   \   000067   60B9         JZ      ??SetLedStatus_5
    596                  HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF);
    597                  HalUARTWrite(0, "led2:off", 8);
    598              }
    599          }
   \                     ??SetLedStatus_3:
   \   000069   D083         POP     DPH
   \   00006B   D082         POP     DPL
   \   00006D   02....       LJMP    ?BRET
    600          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          void SampleApp_ProcessMTMessage(afIncomingMSGPacket_t *msg) {
   \                     SampleApp_ProcessMTMessage:
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    602              byte len = msg->hdr.status;
    603              const char *msgPtr = ((const char *) msg + 2);
   \   00000A   EA           MOV     A,R2
   \   00000B   2402         ADD     A,#0x2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   3400         ADDC    A,#0x0
   \   000011   FF           MOV     R7,A
    604              HalUARTWrite(0, (uint8 *) msgPtr, len);
   \   000012                ; Setup parameters for call to function HalUARTWrite
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FC           MOV     R4,A
   \   000019   7D00         MOV     R5,#0x0
   \   00001B   0A           INC     R2
   \   00001C   0A           INC     R2
   \   00001D   EF           MOV     A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   7900         MOV     R1,#0x0
   \   000021   12....       LCALL   ??HalUARTWrite?relay
    605              uint8 status;
    606          
    607              if (strncmp(msgPtr, "42020xxxNum1Ledrelie", 20) == 0) {
   \   000024                ; Setup parameters for call to function strncmp
   \   000024   75..14       MOV     ?V0 + 0,#0x14
   \   000027   75..00       MOV     ?V0 + 1,#0x0
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C..         MOV     R4,#(`?<Constant "42020xxxNum1Ledrelie">` & 0xff)
   \   000031   7D..         MOV     R5,#((`?<Constant "42020xxxNum1Ledrelie">` >> 8) & 0xff)
   \   000033   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039   EA           MOV     A,R2
   \   00003A   7001         JNZ     ??SampleApp_ProcessMTMessage_0
   \   00003C   EB           MOV     A,R3
   \                     ??SampleApp_ProcessMTMessage_0:
   \   00003D   7023         JNZ     ??SampleApp_ProcessMTMessage_1
    608                  status = 0x00;
   \   00003F   E4           CLR     A
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   F0           MOVX    @DPTR,A
    609                  // ǿ�ƹر���ʪ���쳣����
    610                  forceoffnum1led = 1;
   \   000047   90....       MOV     DPTR,#__Constant_3f800000
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?L_MOV_X
   \   00004F   90....       MOV     DPTR,#forceoffnum1led
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?L_MOV_TO_X
    611                  HalUARTWrite(0, "num1ledrelie", 12);
   \   000057                ; Setup parameters for call to function HalUARTWrite
   \   000057   7C0C         MOV     R4,#0xc
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   7A..         MOV     R2,#(`?<Constant "num1ledrelie">` & 0xff)
   \   00005D   7B..         MOV     R3,#((`?<Constant "num1ledrelie">` >> 8) & 0xff)
   \   00005F   02....       LJMP    ??SampleApp_ProcessMTMessage_2 & 0xFFFF
    612              } else if (strncmp(msgPtr, "42020xxxNum2Ledrelie", 20) == 0) {
   \                     ??SampleApp_ProcessMTMessage_1:
   \   000062                ; Setup parameters for call to function strncmp
   \   000062   78..         MOV     R0,#?V0 + 0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   7C..         MOV     R4,#(`?<Constant "42020xxxNum2Ledrelie">` & 0xff)
   \   000069   7D..         MOV     R5,#((`?<Constant "42020xxxNum2Ledrelie">` >> 8) & 0xff)
   \   00006B   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000071   EA           MOV     A,R2
   \   000072   7001         JNZ     ??SampleApp_ProcessMTMessage_3
   \   000074   EB           MOV     A,R3
   \                     ??SampleApp_ProcessMTMessage_3:
   \   000075   7034         JNZ     ??SampleApp_ProcessMTMessage_4
    613                  status = 0x01;
   \   000077   7401         MOV     A,#0x1
   \   000079   85..82       MOV     DPL,?XSP + 0
   \   00007C   85..83       MOV     DPH,?XSP + 1
   \   00007F   F0           MOVX    @DPTR,A
    614                  // ǿ�ƹرպ�������쳣����
    615                  forceoffnum2led = 1;
   \   000080   90....       MOV     DPTR,#__Constant_3f800000
   \   000083   78..         MOV     R0,#?V0 + 0
   \   000085   12....       LCALL   ?L_MOV_X
   \   000088   90....       MOV     DPTR,#forceoffnum2led
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   12....       LCALL   ?L_MOV_TO_X
    616                  abtTime = 0;
   \   000090   90....       MOV     DPTR,#__Constant_0
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?L_MOV_X
   \   000098   90....       MOV     DPTR,#abtTime
   \   00009B   78..         MOV     R0,#?V0 + 0
   \   00009D   12....       LCALL   ?L_MOV_TO_X
    617                  HalUARTWrite(0, "num2ledrelie", 12);
   \   0000A0                ; Setup parameters for call to function HalUARTWrite
   \   0000A0   7C0C         MOV     R4,#0xc
   \   0000A2   7D00         MOV     R5,#0x0
   \   0000A4   7A..         MOV     R2,#(`?<Constant "num2ledrelie">` & 0xff)
   \   0000A6   7B..         MOV     R3,#((`?<Constant "num2ledrelie">` >> 8) & 0xff)
   \   0000A8   02....       LJMP    ??SampleApp_ProcessMTMessage_2 & 0xFFFF
    618              } else if (strncmp(msgPtr, "42020xxxNum1Ledon", 17) == 0) {
   \                     ??SampleApp_ProcessMTMessage_4:
   \   0000AB                ; Setup parameters for call to function strncmp
   \   0000AB   75..11       MOV     ?V0 + 0,#0x11
   \   0000AE   78..         MOV     R0,#?V0 + 0
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   7C..         MOV     R4,#(`?<Constant "42020xxxNum1Ledon">` & 0xff)
   \   0000B5   7D..         MOV     R5,#((`?<Constant "42020xxxNum1Ledon">` >> 8) & 0xff)
   \   0000B7   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BD   EA           MOV     A,R2
   \   0000BE   7001         JNZ     ??SampleApp_ProcessMTMessage_5
   \   0000C0   EB           MOV     A,R3
   \                     ??SampleApp_ProcessMTMessage_5:
   \   0000C1   7014         JNZ     ??SampleApp_ProcessMTMessage_6
    619                  status = 0x02;
   \   0000C3   7402         MOV     A,#0x2
   \   0000C5   85..82       MOV     DPL,?XSP + 0
   \   0000C8   85..83       MOV     DPH,?XSP + 1
   \   0000CB   F0           MOVX    @DPTR,A
    620                  // ��ʪ�� led on
    621                  HalUARTWrite(0, "num1ledon", 9);
   \   0000CC                ; Setup parameters for call to function HalUARTWrite
   \   0000CC   7C09         MOV     R4,#0x9
   \   0000CE   7D00         MOV     R5,#0x0
   \   0000D0   7A..         MOV     R2,#(`?<Constant "num1ledon">` & 0xff)
   \   0000D2   7B..         MOV     R3,#((`?<Constant "num1ledon">` >> 8) & 0xff)
   \   0000D4   02....       LJMP    ??SampleApp_ProcessMTMessage_2 & 0xFFFF
    622              } else if (strncmp(msgPtr, "42020xxxNum1Ledoff", 18) == 0) {
   \                     ??SampleApp_ProcessMTMessage_6:
   \   0000D7                ; Setup parameters for call to function strncmp
   \   0000D7   75..12       MOV     ?V0 + 0,#0x12
   \   0000DA   78..         MOV     R0,#?V0 + 0
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DF   7C..         MOV     R4,#(`?<Constant "42020xxxNum1Ledoff">` & 0xff)
   \   0000E1   7D..         MOV     R5,#((`?<Constant "42020xxxNum1Ledoff">` >> 8) & 0xff)
   \   0000E3   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000E6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E9   EA           MOV     A,R2
   \   0000EA   7001         JNZ     ??SampleApp_ProcessMTMessage_7
   \   0000EC   EB           MOV     A,R3
   \                     ??SampleApp_ProcessMTMessage_7:
   \   0000ED   7014         JNZ     ??SampleApp_ProcessMTMessage_8
    623                  status = 0x03;
   \   0000EF   7403         MOV     A,#0x3
   \   0000F1   85..82       MOV     DPL,?XSP + 0
   \   0000F4   85..83       MOV     DPH,?XSP + 1
   \   0000F7   F0           MOVX    @DPTR,A
    624                  // ��ʪ�� led off
    625                  HalUARTWrite(0, "num1ledoff", 10);
   \   0000F8                ; Setup parameters for call to function HalUARTWrite
   \   0000F8   7C0A         MOV     R4,#0xa
   \   0000FA   7D00         MOV     R5,#0x0
   \   0000FC   7A..         MOV     R2,#(`?<Constant "num1ledoff">` & 0xff)
   \   0000FE   7B..         MOV     R3,#((`?<Constant "num1ledoff">` >> 8) & 0xff)
   \   000100   02....       LJMP    ??SampleApp_ProcessMTMessage_2 & 0xFFFF
    626              } else if (strncmp(msgPtr, "42020xxxNum2Ledon", 17) == 0) {
   \                     ??SampleApp_ProcessMTMessage_8:
   \   000103                ; Setup parameters for call to function strncmp
   \   000103   75..11       MOV     ?V0 + 0,#0x11
   \   000106   78..         MOV     R0,#?V0 + 0
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   7C..         MOV     R4,#(`?<Constant "42020xxxNum2Ledon">` & 0xff)
   \   00010D   7D..         MOV     R5,#((`?<Constant "42020xxxNum2Ledon">` >> 8) & 0xff)
   \   00010F   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000112   12....       LCALL   ?DEALLOC_XSTACK8
   \   000115   EA           MOV     A,R2
   \   000116   7001         JNZ     ??SampleApp_ProcessMTMessage_9
   \   000118   EB           MOV     A,R3
   \                     ??SampleApp_ProcessMTMessage_9:
   \   000119   7014         JNZ     ??SampleApp_ProcessMTMessage_10
    627                  status = 0x04;
   \   00011B   7404         MOV     A,#0x4
   \   00011D   85..82       MOV     DPL,?XSP + 0
   \   000120   85..83       MOV     DPH,?XSP + 1
   \   000123   F0           MOVX    @DPTR,A
    628                  // ������� led on
    629                  HalUARTWrite(0, "num2ledon", 9);
   \   000124                ; Setup parameters for call to function HalUARTWrite
   \   000124   7C09         MOV     R4,#0x9
   \   000126   7D00         MOV     R5,#0x0
   \   000128   7A..         MOV     R2,#(`?<Constant "num2ledon">` & 0xff)
   \   00012A   7B..         MOV     R3,#((`?<Constant "num2ledon">` >> 8) & 0xff)
   \   00012C   02....       LJMP    ??SampleApp_ProcessMTMessage_2 & 0xFFFF
    630              } else if (strncmp(msgPtr, "42020xxxNum2Ledoff", 18) == 0) {
   \                     ??SampleApp_ProcessMTMessage_10:
   \   00012F                ; Setup parameters for call to function strncmp
   \   00012F   75..12       MOV     ?V0 + 0,#0x12
   \   000132   78..         MOV     R0,#?V0 + 0
   \   000134   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000137   7C..         MOV     R4,#(`?<Constant "42020xxxNum2Ledoff">` & 0xff)
   \   000139   7D..         MOV     R5,#((`?<Constant "42020xxxNum2Ledoff">` >> 8) & 0xff)
   \   00013B   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00013E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000141   EA           MOV     A,R2
   \   000142   7001         JNZ     ??SampleApp_ProcessMTMessage_11
   \   000144   EB           MOV     A,R3
   \                     ??SampleApp_ProcessMTMessage_11:
   \   000145   7013         JNZ     ??SampleApp_ProcessMTMessage_12
    631                  status = 0x05;
   \   000147   7405         MOV     A,#0x5
   \   000149   85..82       MOV     DPL,?XSP + 0
   \   00014C   85..83       MOV     DPH,?XSP + 1
   \   00014F   F0           MOVX    @DPTR,A
    632                  // ������� led off
    633                  HalUARTWrite(0, "num2ledoff", 10);
   \   000150                ; Setup parameters for call to function HalUARTWrite
   \   000150   7C0A         MOV     R4,#0xa
   \   000152   7D00         MOV     R5,#0x0
   \   000154   7A..         MOV     R2,#(`?<Constant "num2ledoff">` & 0xff)
   \   000156   7B..         MOV     R3,#((`?<Constant "num2ledoff">` >> 8) & 0xff)
   \   000158   805F         SJMP    ??SampleApp_ProcessMTMessage_2
    634              } else if (strncmp(msgPtr, "42020xxxNum1Ledreopen", 21) == 0) { // ���¿����쳣����
   \                     ??SampleApp_ProcessMTMessage_12:
   \   00015A                ; Setup parameters for call to function strncmp
   \   00015A   75..15       MOV     ?V0 + 0,#0x15
   \   00015D   78..         MOV     R0,#?V0 + 0
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000162   7C..         MOV     R4,#(`?<Constant "42020xxxNum1Ledreopen">` & 0xff)
   \   000164   7D..         MOV     R5,#((`?<Constant "42020xxxNum1Ledreopen">` >> 8) & 0xff)
   \   000166   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000169   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016C   EA           MOV     A,R2
   \   00016D   7001         JNZ     ??SampleApp_ProcessMTMessage_13
   \   00016F   EB           MOV     A,R3
   \                     ??SampleApp_ProcessMTMessage_13:
   \   000170   701A         JNZ     ??SampleApp_ProcessMTMessage_14
    635                  // ���´���ʪ���쳣����
    636                  forceoffnum1led = 0;
   \   000172   90....       MOV     DPTR,#__Constant_0
   \   000175   78..         MOV     R0,#?V0 + 0
   \   000177   12....       LCALL   ?L_MOV_X
   \   00017A   90....       MOV     DPTR,#forceoffnum1led
   \   00017D   78..         MOV     R0,#?V0 + 0
   \   00017F   12....       LCALL   ?L_MOV_TO_X
    637                  HalUARTWrite(0, "reopennum1led", 13);
   \   000182                ; Setup parameters for call to function HalUARTWrite
   \   000182   7C0D         MOV     R4,#0xd
   \   000184   7D00         MOV     R5,#0x0
   \   000186   7A..         MOV     R2,#(`?<Constant "reopennum1led">` & 0xff)
   \   000188   7B..         MOV     R3,#((`?<Constant "reopennum1led">` >> 8) & 0xff)
   \   00018A   802D         SJMP    ??SampleApp_ProcessMTMessage_2
    638              } else if (strncmp(msgPtr, "42020xxxNum2Ledreopen", 21) == 0) { // ���¿����쳣����
   \                     ??SampleApp_ProcessMTMessage_14:
   \   00018C                ; Setup parameters for call to function strncmp
   \   00018C   78..         MOV     R0,#?V0 + 0
   \   00018E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000191   7C..         MOV     R4,#(`?<Constant "42020xxxNum2Ledreopen">` & 0xff)
   \   000193   7D..         MOV     R5,#((`?<Constant "42020xxxNum2Ledreopen">` >> 8) & 0xff)
   \   000195   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000198   12....       LCALL   ?DEALLOC_XSTACK8
   \   00019B   EA           MOV     A,R2
   \   00019C   7001         JNZ     ??SampleApp_ProcessMTMessage_15
   \   00019E   EB           MOV     A,R3
   \                     ??SampleApp_ProcessMTMessage_15:
   \   00019F   701D         JNZ     ??SampleApp_ProcessMTMessage_16
    639                  // ���´򿪺�������쳣����
    640                  forceoffnum2led = 0;
   \   0001A1   90....       MOV     DPTR,#__Constant_0
   \   0001A4   78..         MOV     R0,#?V0 + 0
   \   0001A6   12....       LCALL   ?L_MOV_X
   \   0001A9   90....       MOV     DPTR,#forceoffnum2led
   \   0001AC   78..         MOV     R0,#?V0 + 0
   \   0001AE   12....       LCALL   ?L_MOV_TO_X
    641                  HalUARTWrite(0, "reopennum2led", 13);
   \   0001B1                ; Setup parameters for call to function HalUARTWrite
   \   0001B1   7C0D         MOV     R4,#0xd
   \   0001B3   7D00         MOV     R5,#0x0
   \   0001B5   7A..         MOV     R2,#(`?<Constant "reopennum2led">` & 0xff)
   \   0001B7   7B..         MOV     R3,#((`?<Constant "reopennum2led">` >> 8) & 0xff)
   \                     ??SampleApp_ProcessMTMessage_2:
   \   0001B9   7900         MOV     R1,#0x0
   \   0001BB   12....       LCALL   ??HalUARTWrite?relay
    642              }
    643          
    644              if (AF_DataRequest(&SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    645                                 SAMPLEAPP_LEDCTL_CLUSTERID,
    646                                 1,
    647                                 &status,
    648                                 &SampleApp_TransID,
    649                                 AF_DISCV_ROUTE,
    650                                 AF_DEFAULT_RADIUS) == afStatus_SUCCESS) {
   \                     ??SampleApp_ProcessMTMessage_16:
   \   0001BE                ; Setup parameters for call to function AF_DataRequest
   \   0001BE   75..1E       MOV     ?V0 + 0,#0x1e
   \   0001C1   78..         MOV     R0,#?V0 + 0
   \   0001C3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C6   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   0001C9   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   0001CC   78..         MOV     R0,#?V0 + 0
   \   0001CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D1   7403         MOV     A,#0x3
   \   0001D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D6   8582..       MOV     ?V0 + 0,DPL
   \   0001D9   8583..       MOV     ?V0 + 1,DPH
   \   0001DC   78..         MOV     R0,#?V0 + 0
   \   0001DE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E1   75..01       MOV     ?V0 + 0,#0x1
   \   0001E4   75..00       MOV     ?V0 + 1,#0x0
   \   0001E7   78..         MOV     R0,#?V0 + 0
   \   0001E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001EC   75..04       MOV     ?V0 + 0,#0x4
   \   0001EF   78..         MOV     R0,#?V0 + 0
   \   0001F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F4   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0001F7   12....       LCALL   ?DEALLOC_XSTACK8
    651              } else {
    652                  // Error occurred in request to send.
    653              }
    654          }
   \   0001FA   7401         MOV     A,#0x1
   \   0001FC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FF   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??strncmp?relay
   \   000007   7402         MOV     A,#0x2
   \   000009   22           RET

   \                                 In  segment INTVEC, offset 0x7b, root
   \                     `??halP12isr??INTVEC 123`:
   \   00007B   02....       LJMP       (halP12isr)

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessIntMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessIntMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Process_SensorInt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Process_SensorInt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SensorIO_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SensorIO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SetLedStatus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetLedStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessMTMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessMTMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "temp:">`:
   \   000000   74656D70     DB "temp:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "humi:">`:
   \   000000   68756D69     DB "humi:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "interrupt">`:
   \   000000   696E7465     DB "interrupt"
   \            72727570
   \            7400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "abnormalnum2">`:
   \   000000   61626E6F     DB "abnormalnum2"
   \            726D616C
   \            6E756D32
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "relievenum2">`:
   \   000000   72656C69     DB "relievenum2"
   \            6576656E
   \            756D3200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%f">`:
   \   000000   256600       DB "%f"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "abnormalnum1">`:
   \   000000   61626E6F     DB "abnormalnum1"
   \            726D616C
   \            6E756D31
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "relievenum1">`:
   \   000000   72656C69     DB "relievenum1"
   \            6576656E
   \            756D3100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "led1:off">`:
   \   000000   6C656431     DB "led1:off"
   \            3A6F6666
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "led2:off">`:
   \   000000   6C656432     DB "led2:off"
   \            3A6F6666
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "led1:on">`:
   \   000000   6C656431     DB "led1:on"
   \            3A6F6E00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "led2:on">`:
   \   000000   6C656432     DB "led2:on"
   \            3A6F6E00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "num1ledrelie">`:
   \   000000   6E756D31     DB "num1ledrelie"
   \            6C656472
   \            656C6965
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "num2ledrelie">`:
   \   000000   6E756D32     DB "num2ledrelie"
   \            6C656472
   \            656C6965
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "num1ledon">`:
   \   000000   6E756D31     DB "num1ledon"
   \            6C65646F
   \            6E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "num1ledoff">`:
   \   000000   6E756D31     DB "num1ledoff"
   \            6C65646F
   \            666600  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "num2ledon">`:
   \   000000   6E756D32     DB "num2ledon"
   \            6C65646F
   \            6E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "num2ledoff">`:
   \   000000   6E756D32     DB "num2ledoff"
   \            6C65646F
   \            666600  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "reopennum1led">`:
   \   000000   72656F70     DB "reopennum1led"
   \            656E6E75
   \            6D316C65
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "reopennum2led">`:
   \   000000   72656F70     DB "reopennum2led"
   \            656E6E75
   \            6D326C65
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "42020xxxNum2Ledreopen">`:
   \   000000   34323032     DB "42020xxxNum2Ledreopen"
   \            30787878
   \            4E756D32
   \            4C656472
   \            656F7065
   \            6E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "42020xxxNum1Ledreopen">`:
   \   000000   34323032     DB "42020xxxNum1Ledreopen"
   \            30787878
   \            4E756D31
   \            4C656472
   \            656F7065
   \            6E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "42020xxxNum2Ledoff">`:
   \   000000   34323032     DB "42020xxxNum2Ledoff"
   \            30787878
   \            4E756D32
   \            4C65646F
   \            666600  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "42020xxxNum2Ledon">`:
   \   000000   34323032     DB "42020xxxNum2Ledon"
   \            30787878
   \            4E756D32
   \            4C65646F
   \            6E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "42020xxxNum1Ledoff">`:
   \   000000   34323032     DB "42020xxxNum1Ledoff"
   \            30787878
   \            4E756D31
   \            4C65646F
   \            666600  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "42020xxxNum1Ledon">`:
   \   000000   34323032     DB "42020xxxNum1Ledon"
   \            30787878
   \            4E756D31
   \            4C65646F
   \            6E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "42020xxxNum2Ledrelie">`:
   \   000000   34323032     DB "42020xxxNum2Ledrelie"
   \            30787878
   \            4E756D32
   \            4C656472
   \            656C6965
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "42020xxxNum1Ledrelie">`:
   \   000000   34323032     DB "42020xxxNum1Ledrelie"
   \            30787878
   \            4E756D31
   \            4C656472
   \            656C6965
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40a00001:
   \   000000   0100A040     DD 40A00001H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3f800000:
   \   000000   0000803F     DD 3F800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42700001:
   \   000000   01007042     DD 42700001H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_41c80001:
   \   000000   0100C841     DD 41C80001H

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     Delay                              0      0      0
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> readCoordinatorJumper         0      0     22
       -> ZDOInitDevice                 0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
       -> SensorIO_Init                 0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalLedBlink                   0      0     20
       -> SetLedStatus                  0      0     20
       -> SampleApp_ProcessIntMessage
                                        0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> HalLedSet                     0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_ProcessMTMessage
                                        0      0     24
       -> MT_UartAppFlowControl         0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
       -> SampleApp_Process_SensorInt
                                        0      0     24
     SampleApp_ProcessIntMessage        0      0     26
       -> HalUARTWrite                  0      0     32
       -> HalUARTWrite                  0      0     32
       -> HalUARTWrite                  0      0     32
       -> HalLedBlink                   0      0     32
     SampleApp_ProcessMTMessage         1      0     34
       -> HalUARTWrite                  0      0     26
       -> strncmp                       0      0     30
       -> HalUARTWrite                  0      0     26
       -> strncmp                       0      0     30
       -> HalUARTWrite                  0      0     26
       -> strncmp                       0      0     30
       -> HalUARTWrite                  0      0     26
       -> strncmp                       0      0     30
       -> HalUARTWrite                  0      0     26
       -> strncmp                       0      0     30
       -> HalUARTWrite                  0      0     26
       -> strncmp                       0      0     30
       -> HalUARTWrite                  0      0     26
       -> strncmp                       0      0     30
       -> HalUARTWrite                  0      0     26
       -> strncmp                       0      0     30
       -> HalUARTWrite                  0      0     26
       -> AF_DataRequest                0      0     44
     SampleApp_Process_SensorInt        0      0     31
       -> HalLedBlink                   0      0     20
       -> AF_DataRequest                0      0     38
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      1      0     73
       -> GetHumiAndTemp                0      0    104
       -> sprintf                       0      0    112
       -> sprintf                       0      0    112
       -> HalUARTWrite                  0      0    104
       -> HalLedSet                     0      0    104
       -> HalUARTWrite                  0      0    104
       -> AF_DataRequest                0      0    122
       -> AF_DataRequest                0      0    122
     SensorIO_Init                      0      0     11
     SetLedStatus                       2      0     10
       -> HalLedSet                     4      0      0
       -> HalUARTWrite                  4      0      0
       -> HalLedSet                     4      0      0
       -> HalUARTWrite                  4      0      0
       -> HalLedSet                     4      0      0
       -> HalUARTWrite                  4      0      0
       -> HalLedSet                     4      0      0
       -> HalUARTWrite                  4      0      0
     halP12isr                         15      0      0
       -> osal_set_event               30      0      0
       -> Delay                        30      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     P1IFG                                    1
     PICTL                                    1
     P1IEN                                    1
     IEN2                                     1
     _A_IEN0                                  1
     _A_IRCON2                                1
     P1INP                                    1
     P1DIR                                    1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     gIntFlag                                 1
     SampleApp_Init                         192
     ?Subroutine1                            14
     SampleApp_ProcessEvent                 241
     ?Subroutine7                             5
     SampleApp_HandleKeys                    61
     ?Subroutine8                             5
     SampleApp_MessageMSGCB                 156
     ?Subroutine5                            11
     ?Subroutine0                             7
     ?Subroutine6                            12
     abtTime                                  4
     forceoffnum1led                          4
     forceoffnum2led                          4
     SampleApp_ProcessIntMessage            138
     ?Subroutine9                             5
     SampleApp_SendPeriodicMessage          359
     ?Subroutine2                            17
     ?Subroutine4                            10
     ??Subroutine10_0                         6
     SampleApp_SendFlashMessage             116
     halP12isr                               48
     SampleApp_Process_SensorInt             89
     Delay                                   30
     SensorIO_Init                           26
     SetLedStatus                           112
     SampleApp_ProcessMTMessage             514
     ?Subroutine3                            10
     ??halP12isr??INTVEC 123                  3
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_ProcessIntMessage?relay      6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Process_SensorInt?relay      6
     ??Delay?relay                            6
     ??SensorIO_Init?relay                    6
     ??SetLedStatus?relay                     6
     ??SampleApp_ProcessMTMessage?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "temp:">                      6
     ?<Constant "humi:">                      6
     ?<Constant "interrupt">                 10
     ?<Constant "abnormalnum2">              13
     ?<Constant "relievenum2">               12
     ?<Constant "%f">                         3
     ?<Constant "abnormalnum1">              13
     ?<Constant "relievenum1">               12
     ?<Constant "led1:off">                   9
     ?<Constant "led2:off">                   9
     ?<Constant "led1:on">                    8
     ?<Constant "led2:on">                    8
     ?<Constant "num1ledrelie">              13
     ?<Constant "num2ledrelie">              13
     ?<Constant "num1ledon">                 10
     ?<Constant "num1ledoff">                11
     ?<Constant "num2ledon">                 10
     ?<Constant "num2ledoff">                11
     ?<Constant "reopennum1led">             14
     ?<Constant "reopennum2led">             14
     ?<Constant "42020xxxNum2Ledreopen">     22
     ?<Constant "42020xxxNum1Ledreopen">     22
     ?<Constant "42020xxxNum2Ledoff">        19
     ?<Constant "42020xxxNum2Ledon">         18
     ?<Constant "42020xxxNum1Ledoff">        19
     ?<Constant "42020xxxNum1Ledon">         18
     ?<Constant "42020xxxNum2Ledrelie">      21
     ?<Constant "42020xxxNum1Ledrelie">      21
     __Constant_40a00001                      4
     __Constant_0                             4
     __Constant_3f800000                      4
     __Constant_42700001                      4
     __Constant_41c80001                      4

 
 2 136 bytes in segment BANKED_CODE
    72 bytes in segment BANK_RELAYS
     3 bytes in segment INTVEC
    48 bytes in segment NEAR_CODE
     8 bytes in segment SFR_AN
   419 bytes in segment XDATA_ROM_C
    66 bytes in segment XDATA_Z
 
 2 256 bytes of CODE  memory (+  3 bytes shared)
   399 bytes of CONST memory (+ 20 bytes shared)
     0 bytes of DATA  memory (+  8 bytes shared)
    66 bytes of XDATA memory

Errors: none
Warnings: 3
